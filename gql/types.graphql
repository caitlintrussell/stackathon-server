

type User @model {
  id: ID! @isUnique
  name: String!
  email: String!
  phone: String!
  dates: [Date!]
}

type Date @model {
  id: ID! @isUnique
  name: String!
  initiator: String!
  zipCode: String!
  noOfMembers: Int!
  members: [User!]
}

type Vote @model {
  id: ID! @isUnique
  value: String!
}

type Category @model {
  id: ID! @isUnique
  name: String!
}

input DateInput {
  name: String!
  initiator: String!
  zipCode: String!
}

input AddUserToDate {
  userId: Int!
  dateId: Int!
}

input UpdateDateInput {
  dateId: Int!
  input: DateInput!
}

input VoteInput {
  dateId: Int!
  value: String!
}

input UpdateVoteInput {
  voteId: Int!
  value: String!
}

input RemoveVoteInput {
  voteId: Int!
}

input UserInput {
  email: String
  password: String
}

### Root Queries ###
type Query {
  # ADMIN
  allDates: [Date]
  # Dates.findById INCLUDE users and votes
  dateById(id: Int!): Date
  # ADMIN
  allVotes: [Vote]
  # Vote.findById MUST BE SELF
  voteById(id: Int!): Vote
  # ADMIN
  allUsers: [User]
  # ADMIN
  userById(id: Int!): User
  # SELF
  me: User
  # ALL USERS
  allCategories: [Category]
  # ALL USERS
  categoryById(id: Int!): Category
}

### Root Mutations ###
type Mutation {
  # POST
  createDate(input: DateInput!): Date
  # PUT
  updateDate(input: UpdateDateInput!): Date
  addUserToDate(input: AddUserToDate!): Date
  # POST
  addVote(input: VoteInput!): Vote
  # PUT
  updateVote(input: updateVote!): Vote
  # DELETE
  removeVote(input: RemoveVoteInput!): Int
  # Signup (returns the user just signed up)
  signup(input: UserInput!): User
  # Login (returns the user just logged in)
  login(input: UserInput!): User
  # Logout (returns the user that was just logged out)
  logout: User
}
