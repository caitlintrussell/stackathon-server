

type User @model {
  id: ID! @isUnique
  name: String!
  email: String!
  phone: String!
  dates: [DATE!]
}

type Date @model {
  id: ID! @isUnique
  name: String!
  initiator: String!
  zipCode: String!
  noOfMembers: Int!
  members: [User!]!
}

type Vote @model {
  id: ID! @isUnique
  value: String!
}

type Categories @model {
  id: ID! @isUnique
  name: String!
}

input DateInput {
  name: String!
  initiator: String!
  zipCode: String!
  members: [User]
}

input UpdateDateInput {
  dateId: Int!
  input: DateInput!
}

input AddVoteInput {
  todoListId: Int!
  input: TodoTaskInput!
}

input RemoveVoteInput {
  voteId: Int!
}

input UserInput {
  email: String
  password: String
}

### Root Queries ###
type Query {
  # Get All Dates (admins only)
  allDates: [Date]
  # Get a particular date by its id (admins only)
  dateById(id: Int!): Date

  # Get All votes (admins only)
  allVotes: [Vote]
  # Get a particular vote (admins only)
  voteById(id: Int!): Vote

  # Get All users (admins only)
  allUsers: [User]
  # Get a particular user by their id (admins only)
  userById(id: Int!): User

  # Describes the currently logged-in user
  me: User
  # me: Int
    # Get All todoLists (admins only)
  allCategories: [Category]
  # Get a particular todoList by its id (admins only)
  categoryById(id: Int!): Category
}

### Root Mutations ###
type Mutation {
  # Creates a TodoList
  createDate(input: DateInput!): Date
  # Update a TodoList
  updateDate(input: UpdateDateInput!): Date
  # Add a TodoTask to a TodoList
  addVote(input: AddVoteInput!): Date
  # Remove a TodoTask from a TodoList
  removeVote(input: RemoveVoteInput!): Int

  # Signup (returns the user just signed up)
  signup(input: UserInput!): User
  # Login (returns the user just logged in)
  login(input: UserInput!): User
  # Logout (returns the user that was just logged out)
  logout: User
}
